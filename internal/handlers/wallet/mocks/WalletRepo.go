// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// WalletRepo is an autogenerated mock type for the WalletRepo type
type WalletRepo struct {
	mock.Mock
}

// Amount provides a mock function with given fields: uuid
func (_m *WalletRepo) Amount(uuid string) (int, error) {
	ret := _m.Called(uuid)

	if len(ret) == 0 {
		panic("no return value specified for Amount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeAmount provides a mock function with given fields: id, amount, operation
func (_m *WalletRepo) ChangeAmount(id string, amount int, operation string) error {
	ret := _m.Called(id, amount, operation)

	if len(ret) == 0 {
		panic("no return value specified for ChangeAmount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, string) error); ok {
		r0 = rf(id, amount, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWalletRepo creates a new instance of WalletRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletRepo {
	mock := &WalletRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
